<?php

declare(strict_types=1);

namespace Tests\Hike\TokenList\Navigator;

use Hike\Tokenizer\Word\Tokenizer;
use Hike\TokenList\Navigator\End;
use Hike\TokenList\Navigator\MatchingOpen;
use Hike\TokenList\Navigator\Next;
use Hike\TokenList\Navigator\Previous;
use Hike\TokenList\Tokens;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\TestCase;

final class MatchingOpenTest extends TestCase
{
    #[Test]
    public function it_navigates_to_the_matching_outer_open_brace(): void
    {
        $tokens = $this->getTokens()->navigate(new End());

        $this->assertNotNull($tokens);

        $tokens = $tokens->navigate(new MatchingOpen());

        $this->assertNotNull($tokens);
        $this->assertSame('{', $tokens->current()->value);

        $this->assertSame('Foo', $tokens->navigate(new Previous(), new Previous())?->current()->value);
    }

    #[Test]
    public function it_navigates_to_the_matching_open_inner_close_brace(): void
    {
        $tokens = $this->getTokens()->navigate(
            new Next('if'),
            new Next('}'),
        );

        $this->assertNotNull($tokens);

        $tokens = $tokens->navigate(new MatchingOpen());

        $this->assertNotNull($tokens);
        $this->assertSame('{', $tokens->current()->value);

        $this->assertSame(
            ')',
            $tokens
                ->navigate(
                    new Previous(),
                    new Previous(),
                )
                ?->current()
                ->value,
        );
    }

    #[Test]
    public function it_navigates_to_the_matching_outer_open_bracket(): void
    {
        $tokens = $this->getTokens()->navigate(
            new Next('if'),
            new Next('{'),
            new Previous(')'),
        );

        $this->assertNotNull($tokens);

        $tokens = $tokens->navigate(new MatchingOpen());

        $this->assertNotNull($tokens);
        $this->assertSame('(', $tokens->current()->value);

        $this->assertSame(
            'if',
            $tokens
                ->navigate(
                    new Previous(),
                    new Previous(),
                )
                ?->current()
                ->value,
        );
    }

    #[Test]
    public function it_navigates_to_the_matching_inner_close_bracket(): void
    {
        $tokens = $this->getTokens()->navigate(
            new Next('rand'),
            new Next(')'),
        );

        $this->assertNotNull($tokens);

        $tokens = $tokens->navigate(new MatchingOpen());

        $this->assertNotNull($tokens);
        $this->assertSame('(', $tokens->current()->value);

        $this->assertSame(
            'rand',
            $tokens
                ->navigate(
                    new Previous(),
                    new Previous(),
                )
                ?->current()
                ->value,
        );
    }

    private function getTokens(): Tokens
    {
        return Tokens::create(new Tokenizer(<<<'EOT'
            <?php

            declare(strict_types=1);

            namespace Test;

            class Foo {

                public function __construct ( ) {

                }

                private function bar ( ) {
                    echo '123';
                    echo '234';
                    if ( rand ( ) === 12 ) {
                        $foo = 'bar';
                    }
                    $contents = \file_get_contents(\realpath('./file.txt'));
                }
            }
            EOT));
    }
}
